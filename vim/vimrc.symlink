" vim: foldmethod=marker

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"    _ _          _                 _      _          _   "
"  _| | |_  _ _  (_) __  ___  _ _  (_) ___| |_  __ _ | |  "
" |_  .  _|| ' \ | |/ _|/ _ \| ' \ | |(_-<|  _|/ _` || |  "
" |_     _||_||_||_|\__|\___/|_||_||_|/__/ \__|\__,_||_|  "
"   |_|_|                                                 "
"                                                         "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



    let mapleader = "\<Space>"
    nnoremap <Space> <nop>


" General {{{1

    set background=dark           " Dark background

    filetype plugin indent on     " Automatically detect file types
    syntax on                     " Syntax hightlighting
    syntax enable                 " Enable Syntax
    scriptencoding utf-8

    set hidden                    " Allow buffer switching without saving

    " Turn backup off, since most stuff is in SVN, git et.c anyway...
    set nobackup
    set nowb
    set noswapfile

" Vim UI {{{1

    set showmode                  " Display the current mode


    " Hide scrollbars
    set guioptions-=L
    set guioptions-=r

    set number                    " Display line numbers
    set showmatch                 " Show matching brackets/parenthesis
    set hlsearch                  " Highlight search
    set ignorecase                " Case insensitive search
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set foldenable                " Autofold code
    set list

    "break lines but only for text files
    autocmd FileType text setlocal textwidth=78

" Formating {{{1

    set nowrap                    " Don't wrap lines

    set shiftwidth=2              " Use indents of 4 spaces
    set expandtab                 " Use spaces instead of tabs
    set tabstop=2                 " An indentation every four columns
    set softtabstop=2             " Let backspaces delete indent
    set nojoinspaces              " Prevents inserting two spaces after puntuatuin on a join (J)
    set splitright                " Puts new vertical splits to the right
    set splitbelow                " Puts new horizontal splits below
    set diffopt+=vertical         " Show diffs vertical
    let g:enable_bold_font=1

    autocmd FileType go setlocal noexpandtab


" Key Mappings {{{1

    "Leader Mappings {{{2

        " Space toggles the fold
        nnoremap <leader>f za

        " Edit .vimrc file #EditVim
        nnoremap <leader>ev :vsplit $MYVIMRC<cr>

        " Source the vimrc #SourceVim
        nnoremap <leader>sv :so $MYVIMRC<cr>

        " Clear the search highlight
        map <silent> <leader><cr> :noh<cr>

        " Only buffer
        nnoremap <leader>o :only<cr>

    " Control Mappings {{{2

        " Save files with <C-s>
        nnoremap <C-s> :w<enter>
        inoremap <C-s> <esc>:w<enter>a

        " Smart way to move between windows
        map <C-j> <C-W>j
        map <C-k> <C-W>k
        map <C-h> <C-W>h
        map <C-l> <C-W>l

        " Search function definition under the cursor in the file
        nnoremap <C-f> :execute "normal! " . '/.\+function.\+' . expand("<cword>") . '.\+' . "\<lt>cr>"<cr>:nohlsearch<cr>

        " Paste system clipboard
        nnoremap <C-p> "*p


    " }}}

    " Split mappgings
    nnoremap ss :split<cr>
    nnoremap vv :vsplit<cr>

    " Move to the first non-white character
    nnoremap 0 ^

    " Single and double quote current selection
    vnoremap ' <esc>`>a'<esc>`<i'<esc>

    " Move the current line down
    nnoremap - ddp

    " Move the current line up
    nnoremap _ ddkP


    " Paste Event Message, also removes new lines and escapes quotes
    autocmd! BufRead,BufNewFile,BufEnter *messages.json nnoremap <buffer> P :execute "normal! o\"Message\" : \"" . substitute(substitute(@+,'\\n', '', "g"), '\"', '\\\"', "g") . "\""<cr>

    " Movement mappings {{{2

        " Parentesis movement
        onoremap p i(
        onoremap " i"
        onoremap ' i'

    " Disable the Arrow Keys{{{2
    noremap <Up> <nop>
    inoremap <Up> <nop>
    noremap <Down> <nop>
    inoremap <Down> <nop>
    noremap <Left> <nop>
    inoremap <Left> <nop>
    noremap <Right> <nop>
    inoremap <Right> <nop>


" Command Mappings {{{1

    command! Json %!python -m json.tool
    command! W w


" GUI Settings {{{1

    set lines=40                            " 40 lines of text instead of 24
    set background=dark
    colorscheme liquidcarbon
    let g:solarized_termcolors=256


" Plugins {{{1

    " Vundle Start {{{2
    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    " alternatively, pass a path where Vundle should install plugins
    "call vundle#begin('~/some/path/here')

    " let Vundle manage Vundle, required
    Plugin 'gmarik/Vundle.vim'

    " Plugins {{{2


    " Sensible - Vim defaults that everyone can agree
    Plugin 'tpope/vim-sensible'

    " Ctrl-P Plugin
    " Fuzzy file search
    Plugin 'kien/ctrlp.vim'

    " NERDTree
    Plugin 'scrooloose/nerdtree'

    " Surround
    Plugin 'tpope/vim-surround'

    " Vim Airline
    Plugin 'bling/vim-airline'

    "Vim Airline Themes
    Plugin 'vim-airline/vim-airline-themes'

    " NERD Commenter
    Plugin 'scrooloose/nerdcommenter'

    " AutoPairs
    " Automatically closes quotes, braces, etc.
    Plugin 'jiangmiao/auto-pairs'

    " Completition
    Plugin 'SirVer/ultisnips'
    Plugin 'honza/vim-snippets'
    Plugin 'Shougo/neocomplete.vim'

    " Syntastic
    Plugin 'scrooloose/syntastic'

    " Vim Javascript
    Plugin 'pangloss/vim-javascript'

    " Emmet Plugin
    Plugin 'mattn/emmet-vim'

    " Vim-Repeat Plugin
    Plugin 'tpope/vim-repeat'

    " Vim Wildfire
    " Select blocks using ENTER
    Plugin 'gcmt/wildfire.vim'

    " Ack Plugin
    Plugin 'mileszs/ack.vim'

    " Visual Star Search
    Plugin 'bronson/vim-visual-star-search'

    "Golang
    Plugin 'fatih/vim-go'

    " Git Fugitive
    Plugin 'tpope/vim-fugitive'

    " Vim Hardtime
    Plugin 'takac/vim-hardtime'

    " JsBeautify
    Plugin 'maksimr/vim-jsbeautify'

    " ES6 Plugin
    Plugin 'isRuslan/vim-es6'

    " Prettier
    Plugin 'mitermayer/vim-prettier'

    " Colors
    Plugin 'maxmellon/vim-jsx-pretty'

    "PHP identation
    Plugin '2072/PHP-Indenting-for-VIm'

    " CSV format
    Plugin 'chrisbra/csv.vim'

    " Close Vundle {{{2

    " All of your Plugins must be added before the following line
    call vundle#end()            " required
"    filetype plugin indent on    " required"
    filetype plugin on
    " To ignore plugin indent changes, instead use:
    "filetype plugin on
    "
    " Brief help
    " :PluginList       - lists configured plugins
    " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
    " :PluginSearch foo - searches for foo; append `!` to refresh local cache
    " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
    "
    " see :h vundle for more details or wiki for FAQ
    " Put your non-Plugin stuff after this line


" Plugins Config {{{1

    " Sintastic Config {{{2

        set statusline+=%#warningmsg#
        set statusline+=%{SyntasticStatuslineFlag()}
        set statusline+=%*

        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_auto_loc_list = 1
        let g:syntastic_check_on_open = 1
        let g:syntastic_check_on_wq = 0
        let g:syntastic_javascript_checkers = ['eslint']
        let g:syntastic_jsx_checkers = ['eslint']
        let g:syntastic_jsx_jsxhint_exec = 'jsx-jshint-wrapper'

    " Prettier Config {{{2
        " print semicolons
        let g:prettier#config#semi = 'false'
        " print spaces between brackets
        let g:prettier#config#bracket_spacing = 'true'


    " Vim Airline Config {{{2

        let g:airline_powerline_fonts=1
        let g:airline_theme = 'murmur'


    " NERDTree Config {{{2

        "Automatically open NERDTree when vim starts even if no file is
        "specified
        autocmd StdinReadPre * let s:std_in=1
        autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

        " Close Vim even if NERDTree is opened
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

        "Map NERDTree Toggle
        map <C-n> :NERDTreeToggle<CR>


    " Emmet Config {{{2

        " Enable Emmet only for HTML, CSS and TWIG files
        let g:user_emmet_install_global = 0
        autocmd FileType html,css,twig EmmetInstall

        " Redefine the trigger KEY, Default is <C-Y>
        let g:user_emmet_leader_key='<C-Z>'

    " }

    " Wildfire {{{2

        let g:wildfire_objects=["i'", 'i"', "i)", "i]", "i}", "ip"]


    " Control-P {{{2

        let g:ctrlp_map = '<leader>t'
        set wildignore+=*/tmp/*,*.so,*.swp,*.zip,node_modules/*,*/node_modules/*     " MacOSX/Linux

        " Packages
        if executable('rg')
          set grepprg=rg\ --color=never
          let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
          let g:ctrlp_use_caching = 0
        endif
        let g:ctrlp_custom_ignore = {
         \ 'dir': '\.git$\|\.yardoc\|bower_components|node_modules|public$|log\|tmp$',
         \ 'file': '\.so$\|\.dat$|\.DS_Store$'
         \ }

    " UltiSnips {{{2

        let g:UltiSnipsExpandTrigger="<tab>"
        let g:UltiSnipsJumpForwardTrigger="<c-j>"
        let g:UltiSnipsJumpBackwardTrigger="<c-k>"


    " NeoComplete {{{2

        let g:neocomplete#enable_at_startup = 1

    " Ack config {{{2

        let g:ackprg = 'ag --nogroup --nocolor --column'


    " JsBeautify Config {{{2

        map <c-p> :Prettier<cr>
        " or
        autocmd FileType javascript noremap <buffer>  <c-p> :Prettier<cr>
        " for html
        autocmd FileType html noremap <buffer> <c-p> :call HtmlBeautify()<cr>
        " for css or scss
        autocmd FileType css noremap <buffer> <c-p> :call CSSBeautify()<cr>

    " }}}


    " Vim Hardtime Config {{{2

        " Enable Hardtime by default
        let g:hardtime_default_on = 0
        " Disable Hardtime in NERDTree
        let g:hardtime_ignore_buffer_patterns = [ "CustomPatt[ae]rn", "NERD.*" ]
        " Max count
        let g:hardtime_maxcount = 5

    " }}}

" }}}

" Syntax Checks and corrections {{{1

    highlight ErrorHl ctermfg=red
    autocmd BufWinEnter * match ErrorHl /){/
    autocmd InsertEnter * match ErrorHl /){/
    autocmd InsertLeave * match ErrorHl /){/
    autocmd BufWinLeave * call clearmatches()

